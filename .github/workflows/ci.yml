name: nimcrypto
on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        branch: [master]
        target:
          - os: linux
            cpu: amd64
            nim_dir: nim-devel-amd64
            nim_branch: devel
          - os: linux
            cpu: i386
            nim_dir: nim-devel-i386
            nim_branch: devel
          - os: macos
            cpu: amd64
            nim_dir: nim-devel-amd64
            nim_branch: devel
          - os: windows
            cpu: amd64
            nim_dir: nim-devel-amd64
            nim_branch: devel
          - os: windows
            cpu: i386
            nim_dir: nim-devel-i386
            nim_branch: devel
        include:
          - target:
              os: linux
            builder: ubuntu-18.04
          - target:
              os: macos
            builder: macos-10.15
          - target:
              os: windows
            builder: windows-2019

    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }} (${{ matrix.branch }})'
    runs-on: ${{ matrix.builder }}
    env:
      NIM_DIR: ${{ matrix.target.nim_dir }}
      NIM_BRANCH: ${{ matrix.target.nim_branch }}
    steps:
      - name: Checkout nimcrypto
        uses: actions/checkout@v2
        with:
          path: nimcrypto
          submodules: false

      - name: Restore MinGW-W64 (Windows) from cache
        if: runner.os == 'Windows'
        id: windows-mingw-cache
        uses: actions/cache@v2
        with:
          path: external/mingw-${{ matrix.target.cpu }}
          key: 'mingw-${{ matrix.target.cpu }}'

      - name: Restore Nim DLLs dependencies (Windows) from cache
        if: runner.os == 'Windows'
        id: windows-dlls-cache
        uses: actions/cache@v2
        with:
          path: external/dlls-${{ matrix.target.cpu }}
          key: 'dlls-${{ matrix.target.cpu }}'

      - name: Install MinGW64 dependency (Windows)
        if: >
          steps.windows-mingw-cache.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p external
          if [[ '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            MINGW_URL="https://github.com/brechtsanders/winlibs_mingw/releases/download/11.1.0-12.0.0-9.0.0-r2/winlibs-x86_64-posix-seh-gcc-11.1.0-mingw-w64-9.0.0-r2.7z"
            ARCH=64
          else
            MINGW_URL="https://github.com/brechtsanders/winlibs_mingw/releases/download/11.1.0-12.0.0-9.0.0-r2/winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-9.0.0-r2.7z"
            ARCH=32
          fi
          curl -L "$MINGW_URL" -o "external/mingw-${{ matrix.target.cpu }}.7z"
          7z x -y "external/mingw-${{ matrix.target.cpu }}.7z" -oexternal/
          mv external/mingw$ARCH external/mingw-${{ matrix.target.cpu }}

      - name: Install DLLs dependencies (Windows)
        if: >
          steps.windows-dlls-cache.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p external
          curl -L "https://nim-lang.org/download/windeps.zip" -o external/windeps.zip
          7z x -y external/windeps.zip -oexternal/dlls-${{ matrix.target.cpu }}

      - name: Path to cached dependencies (Windows)
        if: >
          runner.os == 'Windows'
        shell: bash
        run: |
          echo '${{ github.workspace }}'"/external/mingw-${{ matrix.target.cpu }}/bin" >> $GITHUB_PATH
          echo '${{ github.workspace }}'"/external/dlls-${{ matrix.target.cpu }}" >> $GITHUB_PATH

      - name: Build Nim and associated tools
        shell: bash
        working-directory: nimcrypto
        run: |
          echo "${NIM_BRANCH}"
          echo "${NIM_DIR}"

          if [[ '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            PLATFORM=x64
          else
            PLATFORM=x86
          fi
          if [[ '${{ matrix.target.os }}' == 'windows' ]]; then
            ./tests/bootstrap.bat
          else
            ./tests/bootstrap.sh
          fi

      - name: Setup environment
        shell: bash
        run: echo '${{ github.workspace }}/nim/bin' >> $GITHUB_PATH

      - name: Run nimcrypto tests
        shell: bash
        working-directory: nimcrypto
        run: |
          nimble install -y
          nimble test
